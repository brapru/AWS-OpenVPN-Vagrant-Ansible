---

- stat: path=~/ca
  register: ca_dir

- name: easyrsa | Create ~/ca directory
  command: make-cadir ~/ca
  when: not ca_dir.stat.exists

- name: easyrsa | Symbolic Link
  file:
    src: ~/ca/openssl-1.0.0.cnf
    dest: ~/ca/openssl.cnf
    state: link

- name: easyrsa | Run vars script
  shell: bash -c "source ./vars && {{ item.rcmd }}"
  args:
    chdir: "~/ca"
    creates: "~/ca/keys{{ item.out }}"
  with_items:
    - { rcmd: './clean-all'  , out: 'index.txt' }
    - { rcmd: './pkitool --initca'   , out: 'ca.crt' }
    - { rcmd: './pkitool --server server'   , out: 'server.crt, server.key' }
    - { rcmd: './pkitool {{ cert_name }}'   , out: '{{ cert_name }}.crt, {{ cert_name }}.csr, {{ cert_name }}.key' }

- name: easyrsa | Move keys to /etc/openvpn/server
  become: yes
  command: cp /etc/openvpn/server/ta.key {{ home_path }}/ca/keys

- name: easyrsa | Move keys to /etc/openvpn/server
  become: yes
  command: cp {{ home_path }}/ca/keys/{{ item }} /etc/openvpn/server
  with_items:
    - ca.crt
    - server.crt 
    - server.key
    - ta.key

- name: easyrsa | Fetch All Required Certificates and store locally
  become: yes
  synchronize:
    src: "{{ home_path }}/ca/keys/{{ item }}"
    dest: fetched
    mode: pull 
  with_items:
    - ca.crt
    - "{{ cert_name }}.crt"
    - "{{ cert_name }}.csr"
    - "{{ cert_name }}.key"
    - ta.key
